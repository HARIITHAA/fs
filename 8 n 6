#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;
class Student {
public:
char name[20], usn[20], branch[5];
int sem;
void insert(fstream& f1, fstream& f2) {
cout << "Enter Name: ";
cin >> name;
cout << "Enter USN: ";
cin >> usn;
cout << "Enter Sem: ";
cin >> sem;
cout << "Enter Branch: ";
cin >> branch;
write(f1, f2);
}
void write(fstream& f1, fstream& f2) {
f1 << name << "\n";
f2 << name << "\t" << usn << "\t" << sem << "\t" << branch << "\n";
}
void display(fstream& f2) {
f2 >> name >> usn >> sem >> branch;
cout << name << "\t" << usn << "\t" << sem << "\t" << branch << "\n";
}
int search(fstream& f1, const char* key) {
int i = 1;
char x[20];
f1.seekg(0, ios::beg);
while (!f1.eof()) {
f1 >> x;
if (strcmp(x, key) == 0)
return i;
i++;
}
cout << "Record not found\n";
return 0;
}
int remove(fstream& f1, const char* key) {
int i = search(f1, key);

if (i != 0)
return i;
return 0;
}
};
int main() {
fstream f1, f2;
Student s[20], p;
int ch, k = 0, i, j = 0; // Declare j outside the switch statement
f1.open("m.txt", ios::out | ios::trunc);
f2.open("mn.txt", ios::out | ios::trunc);
f1.close();
f2.close();
for (;;) {
cout << "1. Insert 2. Display 3. Search 4. Delete 5. Exit\n";
cout << "Enter choice: ";
cin >> ch;
switch (ch) {
case 1:
f1.open("m.txt", ios::out | ios::app);
f2.open("mn.txt", ios::out | ios::app);
cout << "Enter no. of students: ";
cin >> k;
for (i = 0; i < k; i++)
s[i].insert(f1, f2);
f1.close();
f2.close();
break;
case 2:
f2.open("mn.txt", ios::in);
for (i = 0; i < k; i++)
s[i].display(f2);
f2.close();
break;
case 3:
char name[20];
cout << "Enter name to search: ";
cin >> name;
f1.open("m.txt", ios::in);
f2.open("mn.txt", ios::in);
j = p.search(f1, name);
if (j != 0) {
cout << "Record found & Details are\n";
cout << "Name=" << s[j - 1].name << "\n";
cout << "USN=" << s[j - 1].usn << "\n";

cout << "Sem=" << s[j - 1].sem << "\n";
cout << "Branch=" << s[j - 1].branch << "\n";
}
f1.close();
f2.close();
break;
case 4:
f1.open("m.txt", ios::in);
f2.open("mn.txt", ios::in);
cout << "Enter name to delete: ";
cin >> name;
j = p.remove(f1, name);
if (j != 0) {
for (i = j - 1; i < k - 1; i++)
s[i] = s[i + 1];
cout << "Deletion successful\n";
}
k--;
f1.close();
f2.close();
f1.open("m.txt", ios::out | ios::trunc);
f2.open("mn.txt", ios::out | ios::trunc);
for (i = 0; i < k; i++)
s[i].write(f1, f2);
f1.close();
f2.close();
break;
default:
exit(0);
}
}
return 0;
}

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<fstream>
#include<iostream>
#include<stdlib.h>
using namespace std;
class record
{
public:
char name[20];
char usn[20];
}rec[20];
fstream file[8];
int no;
char fname[8][8]={"1.txt","2.txt","3.txt","4.txt","5.txt","6.txt","7.txt","8.txt"};
void merge_file(char* file1,char* file2,char* filename)
{
record recd[20];
int i,k;
k=0;
fstream f1,f2;
f1.open(file1,ios::in);
f2.open(file2,ios::in);
while(!f1.eof())
{
f1.getline(recd[k].name,20,'|');
f1.getline(recd[k++].usn,20,'\n');
}
while(!f2.eof())

{
f2.getline(recd[k].name,20,'|');
f2.getline(recd[k++].usn,20,'\n');
}
int t,y;
record temp;
for(t=0;t<k-2;t++)
for(y=0;y<k-t-2;y++)
if(strcmp(recd[y].name,recd[y+1].name)>0)
{
temp=recd[y];
recd[y]=recd[y+1];
recd[y+1]=temp;
}
fstream temp1;
temp1.open(filename,ios::out);
for(t=1;t<k-1;t++)
temp1<<recd[t].name<<"|"<<recd[t].usn<<"\n";
f1.close();
f2.close();
temp1.close();
return;
}
void kwaymerge()
{
int i,k;
k=0;
char filename[7][20]={"11.txt","22.txt","33.txt","44.txt","111.txt",
"222.txt","1111.txt"};
for(i=0;i<8;i+=2)
{
merge_file(fname[i],fname[i+1],filename[k++]);

}
k=4;
for(i=0;i<4;i+=2)
{
merge_file(filename[i],filename[i+1],filename[k++]);
}
merge_file(filename[4],filename[5],filename[6])
; return;
}
int main()
{
int i;
cout<<"enter no of records\n";
cin>>no;
cout<<"\nenter the details\n";
for(i=0;i<8;i++)
file[i].open(fname[i],ios::out);
for(i=0;i<no;i++)
{
cout<<"Name:";
cin>>rec[i].name;
cout<<"Usn:";
cin>>rec[i].usn;
file[i%8]<<rec[i].name<<"|"<<rec[i].usn<<"\n";
}
for(i=0;i<8;i++)
file[i].close();
kwaymerge();
fstream result;
result.open("1111.txt",ios::in);
cout<<"sorted records\n";
char name[20],usn[20];

for(i=0;i<no;i++)
{
result.getline(name,20,'|');
result.getline(usn,20,'\n');
cout<<"\nName:"<<name<<"\nUsn:"<<usn<<"\n";
}
return 0;
}
